# ------------------------------------------------

######## ##          ##  ####  ######  ##    ##
##       ##          ## ##  ##   ##   ####  ####
##        ##        ##  ##  ##   ##   ## #### ##
##        ##   ##   ## ########  ##  ##   ##   ##
##         ## #### ##  ##    ##  ##  ##        ##
##         ####  #### ##      ## ## ##          ##
##########  ##    ##  ##      ## ## ##          ##

# Community Water Model Version 0.99
# SETTINGS FILE
# ------------------------------------------------

# for Python 3.7 - no changes in the settings file
# Python 3 only reacts on doubling statements
# e.g. Python 2 works (and takes the last)
# StepEnd = 31/12/2010
# Step End = 10
# Python 3 will not run and will complain about two StepEnds 

[OPTIONS]
#-------------------------------------------------------
# OPTION - to switch on/off
#-------------------------------------------------------
# Data options
# if temperature is stored in Kelvin instead Celsius
# !!! here in Celcius
TemperatureInKelvin = True
# if lat/lon the area has to be user defined = precalculated
gridSizeUserDefined = True
#Additional Setting for using static landcover maps instead of dynamic
staticLandCoverMaps = True

#-----------------------------------------------
# Evaporation
# calculate pot. evaporation (True) or use precalculated pot.evaporation map stacks (False)
calc_evaporation = False

# Method to calculate potential evaporation (default = 1)
# 1: Penman Monteith (is used if PET_modus is missing)
# 2: Milly and Dunne (Energy only PET = 0.8(Rn âˆ’G) )
# 3: Yang et al. Penman Montheith correction method
# 4: Priestley-Taylor 
PET_modus = 3

#-----------------------------------------------
# Irrigation and water demand
# if irrigation is included, otherwise paddy and non paddy is put into 'grassland'
includeIrrigation = True
# if water demand from irrigation, industry and domestic is included
includeWaterDemand = True
includeIndusDomesDemand = True

# Water allocation
# if water demand and availability is calculated for region to compare demand vs. avail
usingAllocSegments = False
# limit abstraction to available groundwater (True) include fossil groundwater (False)
limitAbstraction = True
sectorSourceAbstractionFractions = True
using_lift_areas = True

#-----------------------------------------------
# Glacier 
includeGlaciers = True
includeOnlyGlaciersMelt = False
excludeGlacierArea = True

#-----------------------------------------------
# Environmental Flow
calc_environflow = False
reservoir_releases_in_Excel_settings = True
reservoir_transfers = True

#-----------------------------------------------
# Soil 
#use preferential flow, that bypasses the soil matrix and drains directly to the groundwater (not for irrPaddy)
preferentialFlow = True
# Capillar rise
CapillarRise = True

#-----------------------------------------------
# Routing
# if runoff concentration to the edge of a cell is included
includeRunoffConcentration = False
# Waterbodies like lakes and reservoirs
includeWaterBodies = True
# kinematic wave routing, if False no routing is calculated
includeRouting = True

#-----------------------------------------------
# Inflow from outside of the modelled area
inflow = False
waterquality = False

# --- Reporting & Debugging ------------------- 
###ESSENTIAL FOR CALIBRATION###
reportOldTss = True

# Checking water balance (for debugging)
calcWaterBalance = False
sumWaterBalance = False

# --------------------------------------------------
# Groundwater calculation with Modflow
modflow_coupling = False

# ---------------------------------------------------
# Crops and irrigation
includeCrops = True
moveIrrFallowToNonIrr = False

# The irrigated land classes may have given up its fallow land to the grasslands land class.
# If this is the case, these fallow lands are returned to the irrigated land class briefly to
# allow them to be planted on in the irrigated land class, and then returned to the
# grasslands land class.
leftoverIrrigatedCropIsRainfed = False
use_GeneralCropIrr = 0

# The representative vegetation is determined from a specific user-input map, as compared to being
# determined automatically otherwise.
use_GeneralCropnonIrr = 0
activate_fallow = 1
automaticFallowingIrr = 1
static_irrigation_map = 1 

#-------------------------------------------------------
# DEFINITIONS OF PARAMETERS
#-------------------------------------------------------

#-------------------------------------------------------
[FILE_PATHS]
#-------------------------------------------------------
PathSystem = C:
PathRoot =  C:\Users\jefe\Documents\GitHub\CWatM-Otta-1km
PathOut = C:\Users\jefe\Documents\GitHub\CWatM-Otta-1km_outputs\Crops_paper
PathInit = $(PathRoot)\init
PathMaps = $(PathRoot)
PathMeteo = C:\Users\jefe\Documents\Project_Otta\meteo_senorge
PathParameter = $(PathMaps)\parametermaps
PathCrops = $(PathRoot)\landcover\crops_0
PathWaterdemand = $(PathMaps)\landsurface\waterDemand


Excel_settings_file = $(FILE_PATHS:PathRoot)\settings\cwatm_settings_4.xlsx

#-------------------------------------------------------
[NETCDF_ATTRIBUTES]
institution = IIASA
title = Norway - Otta Water Model - Europe 1km - CWatM
metaNetcdfFile = C:\Users\jefe\Documents\GitHub\CWatM\cwatm\metaNetcdf.xml

#-------------------------------------------------------
# AREA AND OUTLETS
#-------------------------------------------------------
[MASK_OUTLET]

# Area mask
# A pcraster map, tif or netcdf map e.g.  $(FILE_PATHS:PathRoot)/data/areamaps/area_indus.map
# or a retancle: Number of Cols, Number of rows, cellsize, upper left corner X, upper left corner Y 
# area salzburg 4547500 2751500, Vienna 4800500 2807500 Danube 5850500 2653500
MaskMap = $(FILE_PATHS:PathMaps)/areamaps/otta_add.map


#-------------------------------------------------------
# Station data
# either a map e.g. $(FILE_PATHS:PathRoot)/data/areamaps/area3.map
# or a location coordinates (X,Y) e.g. 5.75 52.25 9.25 49.75 )
# Lalm
Gauges =198500 6868500
# if .tif file for gauges, this is a flag if the file is global or local
# e.g. Gauges = $(FILE_PATHS:PathRoot)/data/areamaps/gaugesRhine.tif
GaugesLocal = True

#-------------------------------------------------------
[TIME-RELATED_CONSTANTS]
#-------------------------------------------------------

# StepStart has to be a date e.g. 01/06/1990
# SpinUp or StepEnd either date or numbers 
# SpinUp: from this date output is generated (up to this day: warm up)

StepStart = 01/01/2005
SpinUp =  01/01/2010
StepEnd =  31/12/2015

#-------------------------------------------------------
[INITITIAL CONDITIONS]
#-------------------------------------------------------

# for a warm start initial variables a loaded
# e.g for a start on 01/01/2010 load variable from 31/12/2009
load_initial = True
initLoad = $(FILE_PATHS:PathInit)/otta_20041231.nc

# saving variables from this run, to initiate a warm start next run
# StepInit = saving date, can be more than one: 10/01/1973 20/01/1973
save_initial = False
initSave = $(FILE_PATHS:PathInit)/otta
StepInit = 02/01/2010

#-------------------------------------------------------
# CALIBARTION PARAMETERS
#-------------------------------------------------------
[CALIBRATION]

# These are parameter which are used for calibration
# could be any parameter, but for an easier overview, tehey are collected here
# in the calibration template a placeholder (e.g. 0.11805799193919307eta) instead of value

OUT_Dir = C:\Users\jefe\Documents\GitHub\calibration\calibration_JF\June_calibration_v2\G0001\out\21_best
OUT_TSS_Daily = discharge

#Snow parameters from Snow Calibration calibration\calibration_senorge2 (below)
SnowFactor = 1.5997443423014581

crop_correct =  1.6156137760433094
preferentialFlowConstant = 2.738008060042531
arnoBeta_add = 0.26503064615388455
ksat_fact = 1.2347299594391417
factor_interflow = 0.3662232165126216
recessionCoeff_factor = 4.36297635236083
manningsN = 3.7429190444429397
lakeAFactor = 0.4275572005544939

normalStorageLimit = 0.3
runoffConc_factor = 1
lakeEvaFactor = 1.1
thetas_fact = 1.0
reduceUrbanRunoff = 0.0
add_runoffInfiltrationCoeff = 0.0
soildepth_factor = 1.0


#-------------------------------------------------------
# TOPOGRAPHY MAPS
#-------------------------------------------------------
[TOPOP]
# local drain direction map (1-9)
Ldd = $(FILE_PATHS:PathMaps)/routing/ldd_add.map
# Elevation map used for downscaling meteo maps
Elevation = $(FILE_PATHS:PathMaps)/landsurface/topo/demmin.tif
# Elevation standard deviation [m], i.e. altitude difference elevation within pixel.
# Used for sub-pixel modelling of snow accumulation and melt
ElevationStD = $(FILE_PATHS:PathMaps)/landsurface/topo/demstd.tif

# Area of pixel [m2] (for lat/lon every cell has a different area)
CellArea = $(FILE_PATHS:PathMaps)/landsurface/topo/cellarea.nc

#-------------------------------------------------------
# INPUT METEOROLOGICAL TIMESERIES AS MAPS
#-------------------------------------------------------
[METEO]

# if meteo maps have the same scale than all the other maps e.g. 0.5 deg
meteomapssamescale = False
downscale_wordclim_tavg = $(FILE_PATHS:PathMaps)/meteo/worldclim_tavg.nc 
downscale_wordclim_tmin = $(FILE_PATHS:PathMaps)/meteo/worldclim_tmin.nc 
downscale_wordclim_tmax = $(FILE_PATHS:PathMaps)/meteo/worldclim_tmax.nc 
downscale_wordclim_prec = $(FILE_PATHS:PathMaps)/meteo/worldclim_prec.nc 
# if usemeteodownscaling = True (default if not set) meteo maps will be downscaled
# if usemeteodownscaling = False: meteomaps will be use as they come e.g. as 0.5 deg 
usemeteodownscaling = False 
# precipitation [kg m-2 s-1]
PrecipitationMaps = $(FILE_PATHS:PathMeteo)/pr_*
#PrecipitationMaps = P:/watmodel/CWATM/cwatm_input_1km_Norway/meteo/pr_nor.nc
#PrecipitationMaps = P:/watmodel/CWATM/cwatm_input_1km_Norway/meteo_senorge/pr_nor2.nc
# average daily temperature [K]
TavgMaps = $(FILE_PATHS:PathMeteo)/tas_*
#TavgMaps  = P:/watmodel/CWATM/cwatm_input_1km_Norway/meteo/tas_nor.nc

# ----------------------------------------
# This is used if calc_evaporation = False

# daily reference evaporation (free water) 
E0Maps = $(FILE_PATHS:PathMeteo)/EWRef_daily.nc
# daily reference evapotranspiration (crop) 
ETMaps = $(FILE_PATHS:PathMeteo)/ETRef_daily.nc
# this is true, if ET maps have the same resolution as pr maps
ETsamePr = True

# --------------------------------
# from kg m-2s-1 to m : 86.4
#precipitation_coversion = 86.4
# from MM to m : 0.001
#precipitation_coversion = 0.001
precipitation_coversion = 86.4

#evaporation_coversion = 1.00
# from MM to m : 0.001
evaporation_coversion = 1.0

# OUTPUT maps and timeseries
#OUT_Dir = $(FILE_PATHS:PathOut)
#OUT_MAP_Daily = Precipitation

#-------------------------------------------------------
# CALCULATE EVAPORATION - PENMAN - MONTEITH
#-------------------------------------------------------
[EVAPORATION]

# This is used if calc_evaporation = True
# use albedo maps
albedo = False
albedoMaps = $(FILE_PATHS:PathMaps)/landsurface/albedo/albedo.nc 

# if not albedo maps use fixed albedo
# Albedo of bare soil surface (Supit et. al.)
AlbedoSoil = 0.15
# Albedo of water surface (Supit et. al.)
AlbedoWater = 0.05
# Albedo of vegetation canopy (FAO,1998)
AlbedoCanopy = 0.23

# use CO2 correction from Yang et al. 2019 -> CO2 concentration 
co2conc = $(FILE_PATHS:PathMaps)/RCP_CO2/rcp45.nc4 
# use specific humidity (TRUE) QAir,  or relative humidity (FALSE) - rhs
useHuss = False

# map stacks Temperature [K}]
TminMaps = $(FILE_PATHS:PathMeteo)/tasmin*
TmaxMaps = $(FILE_PATHS:PathMeteo)/tasmax*
# Instantaneous surface pressure[Pa]
PSurfMaps = $(FILE_PATHS:PathMeteo)/ps_*
# 2 m istantaneous specific humidity[kg /kg] (QAir) or relative humidity [%] (rhs)
RhsMaps = $(FILE_PATHS:PathMeteo)/hurs*
# wind speed maps at 10m [m/s]
WindMaps = $(FILE_PATHS:PathMeteo)/wind_*
# radiation surface downwelling shortwave maps  [W/m2]
RSDSMaps = $(FILE_PATHS:PathMeteo)/rsds_*
# radiation surface downwelling longwave maps [W/m2] [W/m2]
RSDLMaps = $(FILE_PATHS:PathMeteo)/rlds_*

# OUTPUT maps and timeseries
#OUT_Dir = $(FILE_PATHS:PathOut)
#OUT_MAP_Daily = ETRef, EWRef, Precipitation

#-------------------------------------------------------
[SNOW]
#-------------------------------------------------------

# Number of vertical Snow layers
NumberSnowLayers = 10
# up to which layer the ice melt is calculated with the middle temperature
GlacierTransportZone = 4

# snow with temperature only or with temperature and radiation
snowmelt_radiation = True

# Temperature lapse rate with altitude [deg C / m]
TemperatureLapseRate = 0.0051
# Multiplier applied to precipitation that falls as snow

# Range [m C-1 d-1] of the seasonal variation, SnowMeltCoef is the average value
SnowSeasonAdj = 0.00107953
# Average temperature at which snow melts
TempMelt = 0.35522
# Average temperature below which precipitation is snow
TempSnow = 0.4954
# Snow melt coefficient: default: 4.0 
# SRM: 0.0045 m/C/day ( = 4.50 mm/C/day), Kwadijk: 18 mm/C/month (= 0.59 mm/C/day)  
# See also Martinec et al., 1998.

# use in CALIBRATION -> copied to CALIBRATION
SnowMeltCoef = 0.0031
SnowMeltRad = 0.30884
IceMeltCoef  = 0.00487

#--------------------------------------------------------------
# INITIAL CONDITIONS - Initial snow depth in snow zone 1-7 [mm]  - SnowCoverIni

[GLACIER]
# linking to OGGM glacier output
MeltGlacierMaps = $(FILE_PATHS:PathMaps)/glaciers/historical/melt_on_otta_senorge_pf15_1km.nc
PrecGlacierMaps = $(FILE_PATHS:PathMaps)/glaciers/historical/liq_prcp_on_otta_senorge_pf15_1km.nc
fractionGlaciercover = $(FILE_PATHS:PathMaps)/glaciers/historical/otta_senorge_area_pf15_1km.nc

includeGlaciers = True
includeOnlyGlaciersMelt = False
excludeGlacierArea = True



[FROST]
# Snow water equivalent, (based on snow density of 450 kg/m3) (e.g. Tarboton and Luce, 1996)
SnowWaterEquivalent = 0.45
# Daily decay coefficient, (Handbook of Hydrology, p. 7.28)
Afrost = 0.97
# Snow depth reduction coefficient, [cm-1], (HH, p. 7.28)
Kfrost = 0.57
# Degree Days Frost Threshold (stops infiltration, percolation and capillary rise)
# Molnau and Bissel found a value 56-85 for NW USA.
#FrostIndexThreshold = 56
FrostIndexThreshold = 46

#--------------------------------------------------------------
# INITIAL CONDITIONS: FrostIndexIni

[VEGETATION]
cropgroupnumber = $(FILE_PATHS:PathMaps)/soil/cropgrp_1km.nc
#cropgroupnumber = 2.0
# soil water depletion fraction, Van Diepen et al., 1988: WOFOST 6.0, p.86, Doorenbos et. al 1978

#-------------------------------------------------------
[SOIL]
#-------------------------------------------------------

PathTopo = $(FILE_PATHS:PathMaps)/landsurface/topo
PathSoil1 =  $(FILE_PATHS:PathMaps)/soil

# Topography mapsNetcdf/maps
# tangent slope
tanslope = $(PathTopo)/tanslope.tif

# maps of relative elevation above flood plains
relativeElevation = $(PathTopo)/dzRel_Norway_1km.nc

# Soil hydraulic properties

# soil (Rosetta pedotransfer function)
KSat1 = $(PathSoil1)/ksat1_1km.map
KSat2 = $(PathSoil1)/ksat2_1km.map
KSat3 = $(PathSoil1)/ksat3_1km.map
# Alpha: an Genuchtenâ€™s shape parameter
alpha1 = $(PathSoil1)/alpha1_1km.map
alpha2 = $(PathSoil1)/alpha2_1km.map
alpha3 = $(PathSoil1)/alpha3_1km.map
#Lambda: an Genuchtenâ€™s shape parameter = n-1-> n = lamda+1, m = 1 - (1/n)
lambda1 = $(PathSoil1)/lambda1_1km.map
lambda2 = $(PathSoil1)/lambda2_1km.map
lambda3 = $(PathSoil1)/lambda3_1km.map
# thetas  is the volumetric water content Î¸ saturated 
thetas1 = $(PathSoil1)/thetas1_1km.map
thetas2 = $(PathSoil1)/thetas2_1km.map
thetas3 = $(PathSoil1)/thetas3_1km.map
# thetar is the volumetric water content Î¸ residual 
thetar1 = $(PathSoil1)/thetar1_1km.map
thetar2 = $(PathSoil1)/thetar2_1km.map
thetar3 = $(PathSoil1)/thetar3_1km.map

percolationImp = $(PathSoil1)/percolationImp_1km.map

maxGWCapRise    = 5.0

minCropKC        = 0.2
minTopWaterLayer = 0.0

# Soil depth
StorDepth1 = $(PathSoil1)/soildepth1_1km.map
StorDepth2 = $(PathSoil1)/soildepth2_1km.map

# preferential flow (between 1.0 and 8.0)
# used in CALIBRATION -> copied to CALIBRATION
#preferentialFlowConstant = 4.0

#-------------------------------------------------------
[LANDCOVER]
PathLandcover = $(FILE_PATHS:PathMaps)/landsurface
#fractionLandcover = $(PathLandcover)/fractionLandcover_Otta_Laerdal1.nc

coverTypes = forest, grassland, irrPaddy, irrNonPaddy, sealed, water
coverTypesShort = f, g, i, n, s, w

# Landcover can vary from year to year
dynamicLandcover = False
# if landcover cannot vary, which year should be taken as fixed year
fixLandcoverYear = 1991

FRUIT_TREE_Irr = $(FILE_PATHS:PathCrops)/NIBIO_FruitTree_Irrigated_OttaLaerdal_fraction_V1_0.tif
FRUIT_BERRIES_Irr =$(FILE_PATHS:PathCrops)/NIBIO_FruitBerr_Irrigated_OttaLaerdal_fraction_V1_0.tif
VEGETABLES_Irr = $(FILE_PATHS:PathCrops)/NIBIO_Veg_Irrigated_OttaLaerdal_fraction_V1_0.tif
POTATOES_Irr = $(FILE_PATHS:PathCrops)/NIBIO_Potatoes_Irrigated_OttaLaerdal_fraction_V1_0.tif
SPRING_WHEAT_Irr = $(FILE_PATHS:PathCrops)/NIBIO_SpringWheat_Irrigated_OttaLaerdal_fraction_V1_0.tif
BARLEY_Irr = $(FILE_PATHS:PathCrops)/NIBIO_Barley_Irrigated_OttaLaerdal_fraction_V1_0.tif
OATS_Irr = $(FILE_PATHS:PathCrops)/NIBIO_Oats_Irrigated_OttaLaerdal_fraction_V1_0.tif
OILS_SUNFLOWER_Irr = $(FILE_PATHS:PathCrops)/NIBIO_OilPlants_Irrigated_OttaLaerdal_fraction_V1_0.tif
PASTURE_EXTENSIVE_Irr = $(FILE_PATHS:PathCrops)/NIBIO_Grassland_Irrigated_OttaLaerdal_fraction_V2_0.tif

FRUIT_TREE_nonIrr = $(FILE_PATHS:PathCrops)/NIBIO_crop_map_value0.tif
FRUIT_BERRIES_nonIrr = $(FILE_PATHS:PathCrops)/NIBIO_crop_map_value0.tif
VEGETABLES_nonIrr =  $(FILE_PATHS:PathCrops)/NIBIO_crop_map_value0.tif
POTATOES_nonIrr = $(FILE_PATHS:PathCrops)/NIBIO_crop_map_value0.tif
SPRING_WHEAT_nonIrr = $(FILE_PATHS:PathCrops)/NIBIO_crop_map_value0.tif 
BARLEY_nonIrr = $(FILE_PATHS:PathCrops)/NIBIO_crop_map_value0.tif
OATS_nonIrr = $(FILE_PATHS:PathCrops)/NIBIO_crop_map_value0.tif
OILS_SUNFLOWER_nonIrr = $(FILE_PATHS:PathCrops)/NIBIO_crop_map_value0.tif
PASTURE_EXTENSIVE_nonIrr = $(FILE_PATHS:PathCrops)/NIBIO_crop_map_value0.tif

#-------------------------------------------------------

[__forest]
PathForest = $(FILE_PATHS:PathMaps)/landcover/forest
PathSoil1 =  $(FILE_PATHS:PathMaps)/soil

# Parameters for the Arno's scheme 
# arnoBeta is defined by orographic,+ land cover add + calibration add, the soil water capacity distribution is based on this 
# range [0.01 - 1.2]
forest_arnoBeta = 0.2

#forest_soil
forest_KSat1 = $(PathSoil1)/ksat1_1km.map
forest_KSat2 = $(PathSoil1)/ksat2_1km.map
forest_KSat3 = $(PathSoil1)/ksat3_1km.map
forest_alpha1 = $(PathSoil1)/alpha1_1km.map
forest_alpha2 = $(PathSoil1)/alpha2_1km.map
forest_alpha3 = $(PathSoil1)/alpha3_1km.map
forest_lambda1 = $(PathSoil1)/lambda1_1km.map
forest_lambda2 = $(PathSoil1)/lambda2_1km.map
forest_lambda3 = $(PathSoil1)/lambda3_1km.map
forest_thetas1 = $(PathSoil1)/thetas1_1km.map
forest_thetas2 = $(PathSoil1)/thetas2_1km.map
forest_thetas3 = $(PathSoil1)/thetas3_1km.map
forest_thetar1 = $(PathSoil1)/thetar1_1km.map
forest_thetar2 = $(PathSoil1)/thetar2_1km.map
forest_thetar3 = $(PathSoil1)/thetar3_1km.map

# other paramater values
forest_minInterceptCap  = 0.001
forest_cropDeplFactor   = 0.0
forest_rootFraction1 = $(PathForest)/rootFraction1.map
forest_maxRootDepth  = $(PathForest)/maxRootDepth.map
forest_cropCoefficientNC = $(PathForest)/cropCoefficientForest_10days.nc
forest_interceptCapNC    = $(PathForest)/interceptCapForest_10days.nc

forest_fracVegCover = $(FILE_PATHS:PathMaps)/landsurface/fracforest_0.tif

[__grassland]
PathGrassland = $(FILE_PATHS:PathMaps)/landcover/grassland

# Parameters for the Arno's scheme: 
grassland_arnoBeta = 0.0
# arnoBeta is defined by orographic,+ land cover add + calibration add, the soil water capacity distribution is based on this
# range [0.01 - 1.2]

# other paramater values
grassland_minInterceptCap  = 0.001
grassland_cropDeplFactor   = 0.0
grassland_rootFraction1 = $(PathGrassland)/rootFraction1.map
grassland_maxRootDepth  = $(PathGrassland)/maxRootDepth.map
grassland_cropCoefficientNC = $(PathGrassland)/cropCoefficientGrassland_10days.nc
grassland_interceptCapNC    = $(PathGrassland)/interceptCapGrassland_10days.nc

grassland_fracVegCover = $(FILE_PATHS:PathMaps)/landsurface/fracgrassland_2.tif

[__irrPaddy]
PathIrrPaddy = $(FILE_PATHS:PathMaps)/landcover/irrPaddy

# Parameters for the Arno's scheme:
irrPaddy_arnoBeta = 0.2
# arnoBeta is defined by orographic,+ land cover add + calibration add, the soil water capacity distribution is based on this
# range [0.01 - 1.2]

# other paramater values
irrPaddy_minInterceptCap  = 0.001
irrPaddy_cropDeplFactor   = 0.0
irrPaddy_rootFraction1 = $(PathIrrPaddy)/rootFraction1.map
irrPaddy_maxRootDepth  = $(PathIrrPaddy)/maxRootDepth.map
irrPaddy_cropCoefficientNC = $(PathIrrPaddy)/cropCoefficientirrPaddy_10days.nc
# maximum flooding depth for paddy
irrPaddy_maxtopwater = 0.05

irrPaddy_fracVegCover = $(FILE_PATHS:PathMaps)/landsurface/fracirrPaddy_0.tif

[__irrNonPaddy]
PathIrrNonPaddy = $(FILE_PATHS:PathMaps)/landcover/irrNonPaddy

# Parameters for the Arno's scheme:
irrNonPaddy_arnoBeta = 0.2
# arnoBeta is defined by orographic,+ land cover add + calibration add, the soil water capacity distribution is based on this
# range [0.01 - 1.2]

# other paramater values
irrNonPaddy_minInterceptCap  = 0.001
irrNonPaddy_cropDeplFactor   = 0.0
irrNonPaddy_rootFraction1 = $(PathIrrNonPaddy)/rootFraction1.map
irrNonPaddy_maxRootDepth  = $(PathIrrNonPaddy)/maxRootDepth.map
irrNonPaddy_cropCoefficientNC = $(PathIrrNonPaddy)/cropCoefficientirrNonPaddy_10days.nc

irrNonPaddy_fracVegCover  = $(FILE_PATHS:PathMaps)/landsurface/fracirrNonPaddy_1.tif
#irrNonPaddy_fracVegCover  = $(FILE_PATHS:PathMaps)/landsurface/fracirrNonPaddy_0.tif

[__sealed]
PathSealed = $(FILE_PATHS:PathMaps)/landcover/sealed
sealed_minInterceptCap  = 0.001

sealed_fracVegCover = $(FILE_PATHS:PathMaps)/landsurface/fracsealed_1.tif

[__open_water]
PathWater = $(FILE_PATHS:PathMaps)/landcover/water
water_minInterceptCap  = 0.0

water_fracVegCover = $(FILE_PATHS:PathMaps)/landsurface/fracwater_0.tif

#-------------------------------------------------------
[GROUNDWATER]
#-------------------------------------------------------

PathGroundwater = $(FILE_PATHS:PathMaps)/groundwater

recessionCoeff = $(PathGroundwater)/k_v20_1km.nc
# baseflow = recessionCoeff * storage groundwater
kSatAquifer = $(PathGroundwater)/k_v20_1km.nc
specificYield = $(PathGroundwater)/specif_yield.tif
# both not used at the moment in groundwater module, but already loaded

#--------------------------------------------------------------
# INITIAL CONDITIONS: storGroundwater


#-------------------------------------------------------
[WATERDEMAND]
#-------------------------------------------------------

# For water demand vs. availability: areas have to be aggregated
# Allocation map
swAbstractionFraction_Channel_Domestic = 1
swAbstractionFraction_Channel_Livestock = 1
swAbstractionFraction_Channel_Industry = 1
swAbstractionFraction_Channel_Irrigation = 1
 
swAbstractionFraction_Lake_Domestic = 0
swAbstractionFraction_Lake_Livestock = 0
swAbstractionFraction_Lake_Industry = 0
swAbstractionFraction_Lake_Irrigation = 0

swAbstractionFraction_Lift_Domestic = 0.9
swAbstractionFraction_Lift_Livestock = 0.9
swAbstractionFraction_Lift_Industry = 0.9
swAbstractionFraction_Lift_Irrigation = 0.9

swAbstractionFraction_Res_Domestic = 1
swAbstractionFraction_Res_Livestock = 1
swAbstractionFraction_Res_Industry = 1
swAbstractionFraction_Res_Irrigation = 1

gwAbstractionFraction_Domestic = 1
gwAbstractionFraction_Livestock = 1
gwAbstractionFraction_Industry = 1
gwAbstractionFraction_Irrigation = 1

 
allocSegments = $(FILE_PATHS:PathWaterdemand)/catchx.nc


# Demand in m/day [True] (default) or as mio m3 per year or month [False]
demand_unit = False

# Demand data monthly or yearly, as  m day-1 or mio m3 per month
domesticWaterDemandFile = $(FILE_PATHS:PathWaterdemand)/domesticWaterDemand.nc
# time = True for monthly, False for yearly
domesticTimeMonthly = False
# name of the variable Withrawal = Gross, consumption = Netto
domesticWithdrawalvarname = grossWaterDemand
domesticConsuptionvarname = netWaterDemand


industryWaterDemandFile = $(FILE_PATHS:PathWaterdemand)/industryWaterDemand.nc
industryTimeMonthly = False
industryWithdrawalvarname = grossindWaterDemand
industryConsuptionvarname = netindWaterDemand

 
uselivestock = True
livestockWaterDemandFile = $(FILE_PATHS:PathWaterdemand)/livestockWaterDemand_revised.nc
livestockTimeMonthly = False  
livestockvarname = livestockWaterDemand



# using environmental flow (EF) (per month) as input value
# EF will be treated as one part of overall water demand
use_environflow = False
EnvironmentalFlowFile = $(FILE_PATHS:PathOut)/MQ90_12month.nc

#irrNonPaddy_efficiency = $(FILE_PATHS:PathMaps)/landsurface/waterDemand/efficiency.nc
#irrPaddy_efficiency = $(FILE_PATHS:PathMaps)/landsurface/waterDemand/efficiency.nc
irrNonPaddy_efficiency = 0.8
irrPaddy_efficiency = 0.8
irrigation_returnfraction = 0.5

# ------------------------------------------------------------------
# Estimate of fractions of groundwater and surface water abstractions
# Either a fixed fraction for surface water abstration
# based on fraction of average baseflow and upstream average discharge 
# if swAbstractionFrac < 0: fraction is taken from baseflow / discharge 
# if swAbstractionFrac > 0 this value is taken as a fixed value 
swAbstractionFrac = 0.8

averageDischarge = $(FILE_PATHS:PathOut)/discharge_totalavg.nc
# in [m3/s]
averageBaseflow  = $(FILE_PATHS:PathOut)/baseflow_totalavg.nc
# in [m]
baseflowInM = True
# if baseflow is in [m] instead of [m3/s] it will be converted [TRUE]. If [False] it will be not converted
# -------------------------
# Water Allocation
# Buffer around lakes and reservoirs - water is taken not only from water cells but from
# a rectangular (e.g. 1,3 or 5 please odd numbers) around a waterbody cell
buffer_waterbodies = 3
# Water is taken from surface and groundwater from neighbioring cells, if water is insufficient
# how many cells form a allocation area (e.g. 1,2,3...)
allocation_area = 10
# Farmers do not irrigated to field capacity but to a fraction of it
alphaDepletion = 0.7

lift_areas = $(FILE_PATHS:PathWaterdemand)/command_areas_Otta_Laerdal0_exp.tif
# ------------------------------------------------------------------

#-------------------------------------------------------
# RUNOFF CONCENTRATION
#-------------------------------------------------------
[RUNOFF_CONCENTRATION]

# using triagular weigthning method
# the bigger the factor, more lag time 
forest_runoff_peaktime = 1.0
grassland_runoff_peaktime = 0.5
irrPaddy_runoff_peaktime = 0.5
irrNonPaddy_runoff_peaktime = 0.5
sealed_runoff_peaktime = 0.15 
water_runoff_peaktime = 0.01

interflow_runoff_peaktime =1.0
baseflow_runoff_peaktime = 2.0

# initial conditions:
# here only 1 layer is shown, but there are up to 10: runoff_concIni


#-------------------------------------------------------
# ROUTING MAPS and PARAMETERSD
#-------------------------------------------------------
[ROUTING]

PathRouting = $(FILE_PATHS:PathMaps)/routing

# Number of substep per day
# should be 10 for 0.5 deg but 24 for 0.1 deg

NoRoutingSteps = 80
#kinematic wave parameter: 0.6 is for broad sheet flow
chanBeta = 0.6

# Channel gradient (fraction, dy/dx)
chanGrad = $(PathRouting)/kinematic/changrad.nc
# Minimum channel gradient (for kin. wave: slope cannot be 0)
chanGradMin = 0.0001

#Channel Manning's n
chanMan = $(PathRouting)/kinematic/chanman.nc
#Channel length [meters]
chanLength = $(PathRouting)/kinematic/chanleng.nc
#Channel bottom width [meters]
chanWidth = $(PathRouting)/kinematic/chanbw2.nc
#Bankfull channel depth [meters]
chanDepth = $(PathRouting)/kinematic/chanbnkf2.nc

# initial conditions: channelStorageIni, riverbedExchangeIni, dischargeIni  

#-------------------------------------------------------
# LAKES AND RESERVOIRS
#-------------------------------------------------------
[LAKES_RESERVOIRS]

PathLakesRes = $(FILE_PATHS:PathMaps)/routing/lakereservoirs
#Reservoir_releases = $(PathLakesRes)/reservoirOperations_Otta_400mBuffer_edited.nc

# Use reservoirs and lakes (otherwise use only lakes Lake ID=1 and 3 => natural conditions)
useResAndLakes = True
# Reservoirs do have a year of implementation
dynamicLakesRes = True
# if Reservoirs does not have a year of implemtation, which year should be taken as fixed year
fixLakesResYear = 1990


#----------------------------
#Big lakes and Reservoirs

# ID of every lake, reservoir from HydroLakes database
waterBodyID = $(PathLakesRes)/lakeresID.nc
# 1 for lake, 2 for reservoir, 3 for lake and reservoir
waterBodyTyp = $(PathLakesRes)/lakeresType.nc
# Avergae discharge from HydroLakes Database
waterBodyDis = $(PathLakesRes)/lakeresDis.nc

# Lakes surface area from HydroLakes Database 
waterBodyArea = $(PathLakesRes)/lakeresArea.nc
# a factor to scale the outlet of a lake
#lakeAFactor = 1.0  -> calibration

#----------------------------
# Small lakes and reservoirs

useSmallLakes = False

smallLakesRes = $(PathLakesRes)/smallLakesRes.nc
smallwaterBodyDis = $(PathLakesRes)/smallLakesResDis.nc

# averageRunoff in [m] (if not given smallwaterBodyDis is taken instead)
#averageRunoff  = $(FILE_PATHS:PathOut)/runoff_totalavg_cali.nc

# initial conditions: lakeInflowIni, lakeStorageIni, outLakeIni, lakeOutflowIni, reservoirStorageIni 

#------------------
# Reservoirs
# reservoir volume from HydroLakes database
waterBodyVolRes = $(PathLakesRes)/lakeresVolRes.nc
# reservoir starting year from HydroLakes database 
waterBodyYear = $(PathLakesRes)/lakeresYear.nc

#  Conservative, normal and flood storage limit (fraction of total storage, [-])
conservativeStorageLimit = 0.1
#normalStorageLimit = 0.5   # --> put into calibration
floodStorageLimit = 1
# adjusting the balance between normal and flood storage
# [0 ..1]  0: NormalstorageLimit      1: (= closer to flood) results in keeping the normal qoutflow longer constant
adjust_Normal_Flood = 0.5

# Minimum, Normal and Non-damaging reservoir outflow  (fraction of average discharge, [-])
MinOutflowQ = 0.2
NormalOutflowQ = 1.0
NonDamagingOutflowQ = 4.0

#-------------------------------------------------------
[INFLOW]
#-------------------------------------------------------

# if option inflow = true
# the inflow from outside is added at inflowpoints
In_Dir = $(FILE_PATHS:PathRoot)/in

# nominal map with locations of (measured)inflow hydrographs [cu m / s]
InflowPoints = $(In_Dir)/in.map
#InflowPoints = 8.25 49.75 7.75 50.25

# if InflowPoints is a map, this flag is to identify if it is global (False) or local (True)
# observed or simulated input hydrographs as time series [cu m / s]
# Note: that identifiers in time series have to correspond to InflowPoints
# can be several timeseries in one file or different files e.g. main.tss mosel.tss
#QInTS = main1.tss mosel1.tss
QInTS = mm.tss



#-------------------------------------------------------
[ENVIRONMENTALFLOW]
#-------------------------------------------------------

# Either calculate without run with predone discharge (set calc_ef_after = False)
calc_ef_after = True
# Or calculate after run (set calc_ef_after = False) and defining the file to be used
EFDis = $(FILE_PATHS:PathOut)/discharge_rhine.nc
# if predone discharge, do the maps need to be cut to fit to the mask?
cut_ef_map = False


# MAF: Mean, Q90: percentile 90, MMF: monthly average, MQ90: monthly Q90 9averagwed over al Jan, Feb..
# EF_VMF: Environmental flow - variable monthly flow, EF_VMF_LIH - EF- variable monthly flow, high intermediate, low class
#OUT_Dir = $(FILE_PATHS:PathOut)
#OUT_MAP_Once = MAF, Q90
#OUT_MAP_12month = MMF, MQ90, EF_VMF, EF_VMF_LIH
#OUT_MAP_12month = MQ90, EF_VMF



#+++++++++++++++++++++++++++++++++++++++++++++++++++++++
#+++++++++++++++++++++++++++++++++++++++++++++++++++++++


[OUTPUT]
OUT_Dir = $(FILE_PATHS:PathOut)
#OUT_TSS_AreaSum_Daily = Precipitation, runoff, totalET, directRunoffGlacier, discharge, GlacierMelt
#OUT_MAP_Daily: GlacierMelt, directRunoffGlacier, Lift_Irrigation, Lift_Industry, Lift_Livestock, Lift_Domestic, industryDemand, act_irrPaddyDemand, act_irrNonpaddyDemand, livestockDemand,totalIrrDemand,domesticDemand, nonIrrDemand, act_domWithdrawal,act_indWithdrawal,act_livWithdrawal, SnowCoverS[7], SnowCover, Rain, Snow, IceMelt, SnowMelt, snowEvap, iceEvap, act_nonpaddyConsumption, act_paddyConsumption, act_livConsumption, returnflowIrr, returnflowNonIrr, GW_Irrigation, Res_Irrigation, Lake_Irrigation, Channel_Irrigation, GW_Industry, GW_Livestock, GW_Domestic, Res_Industry, Res_Livestock, Res_Domestic, Lake_Industry, Lake_Livestock, Lake_Domestic, Channel_Domestic, Channel_Livestock, Channel_Industry, prefFlow_GW, perc3toGW_GW, lakeResInflowM, lakeResOutflowM, act_indConsumption, act_domConsumption, act_livConsumption, act_irrWithdrawal, act_nonIrrWithdrawal,    snowEvap, capillar, baseflow, actTransTotal_forest, actTransTotal_grasslands, actTransTotal_paddy, actTransTotal_nonpaddy, unmet_lost, unmetDemand, pot_GroundwaterAbstract, storGroundwater, discharge, nonFossilGroundwaterAbs, Precipitation, totalET, EvapoChannel, EvapWaterBodyM, act_nonIrrConsumption, channelStorage, lakeResStorage, totalSto, sum_actTransTotal, sum_actBareSoilEvap, sum_interceptEvap, sum_openWaterEvap, addtoevapotrans, act_bigLakeResAbst, sum_gwRecharge, sum_capRiseFromGW, act_totalIrrConsumption, sum_runoff, returnFlow, act_SurfaceWaterAbstract, dis_outlet, act_irrNonpaddyWithdrawal,abstractedLakeReservoirM3 
OUT_MAP_TotalEnd: cellArea, resVolume
OUT_MAP_MonthEnd: fracVegCover[0], fracVegCover[1], fracVegCover[2], fracVegCover[3], fracVegCover[4], fracVegCover[5], frac_totalIrr, frac_totalnonIrr, availableArableLand, fallowIrr, fallownonIrr, GeneralCrop_Irr, GeneralCrop_nonIrr, fracCrops_Irr[0], fracCrops_Irr[1],fracCrops_Irr[2],fracCrops_Irr[3],fracCrops_Irr[4],fracCrops_Irr[5],fracCrops_Irr[6],fracCrops_Irr[7],fracCrops_Irr[8],fracCrops_nonIrr[0], fracCrops_nonIrr[1],fracCrops_nonIrr[2],fracCrops_nonIrr[3],fracCrops_nonIrr[4],fracCrops_nonIrr[5],fracCrops_nonIrr[6],fracCrops_nonIrr[7],fracCrops_nonIrr[8],fracCrops_IrrLandDemand[0], fracCrops_IrrLandDemand[1],fracCrops_IrrLandDemand[2],fracCrops_IrrLandDemand[3],fracCrops_IrrLandDemand[4],fracCrops_IrrLandDemand[5],fracCrops_IrrLandDemand[6],fracCrops_IrrLandDemand[7],fracCrops_IrrLandDemand[8],fracCrops_nonIrrLandDemand[0],fracCrops_nonIrrLandDemand[1],fracCrops_nonIrrLandDemand[2],fracCrops_nonIrrLandDemand[3],fracCrops_nonIrrLandDemand[4],fracCrops_nonIrrLandDemand[5],fracCrops_nonIrrLandDemand[6],fracCrops_nonIrrLandDemand[7],fracCrops_nonIrrLandDemand[8]
#OUT_Map_MonthTot = irr_crop[0], irr_crop[1], irr_crop[2], irr_crop[3], irr_crop[4], irr_crop[5], irr_crop[6], irr_crop[7], irr_crop[8], actTransTotal_crops_Irr[0], actTransTotal_crops_Irr[1], actTransTotal_crops_Irr[2], actTransTotal_crops_Irr[3], actTransTotal_crops_Irr[4], actTransTotal_crops_Irr[5], actTransTotal_crops_Irr[6], actTransTotal_crops_Irr[7], actTransTotal_crops_Irr[8], actTransTotal_crops_nonIrr[0], actTransTotal_crops_nonIrr[1], actTransTotal_crops_nonIrr[2], actTransTotal_crops_nonIrr[3], actTransTotal_crops_nonIrr[4], actTransTotal_crops_nonIrr[5], actTransTotal_crops_nonIrr[6], actTransTotal_crops_nonIrr[7], actTransTotal_crops_nonIrr[8], ET_crop_nonIrr[0], ET_crop_Irr[0], ET_crop_nonIrr[1], ET_crop_Irr[1], ET_crop_nonIrr[2], ET_crop_Irr[2], ET_crop_nonIrr[3], ET_crop_Irr[3], ET_crop_nonIrr[4], ET_crop_Irr[4], ET_crop_nonIrr[5], ET_crop_Irr[5], ET_crop_nonIrr[6], ET_crop_Irr[6], ET_crop_nonIrr[7], ET_crop_Irr[7], ET_crop_nonIrr[8], ET_crop_Irr[8]
OUT_Map_Daily:  Lift_Irrigation, Lift_Industry, Lift_Livestock, Lift_Domestic, industryDemand, act_irrPaddyDemand, act_irrNonpaddyDemand, livestockDemand,totalIrrDemand,domesticDemand, nonIrrDemand, act_domWithdrawal,act_indWithdrawal,act_livWithdrawal, SnowCoverS[7], SnowCover, Rain, Snow, IceMelt, SnowMelt, snowEvap, iceEvap, act_nonpaddyConsumption, act_paddyConsumption, act_livConsumption, returnflowIrr, returnflowNonIrr, GW_Irrigation, Res_Irrigation, Lake_Irrigation, Channel_Irrigation, GW_Industry, GW_Livestock, GW_Domestic, Res_Industry, Res_Livestock, Res_Domestic, Lake_Industry, Lake_Livestock, Lake_Domestic, Channel_Domestic, Channel_Livestock, Channel_Industry, prefFlow_GW, perc3toGW_GW, lakeResInflowM, lakeResOutflowM, act_indConsumption, act_domConsumption, act_livConsumption, act_irrWithdrawal, act_nonIrrWithdrawal,    snowEvap, capillar, baseflow, actTransTotal_forest, actTransTotal_grasslands, actTransTotal_paddy, actTransTotal_nonpaddy, unmet_lost, unmetDemand, pot_GroundwaterAbstract, storGroundwater, discharge, nonFossilGroundwaterAbs, Precipitation, totalET, EvapoChannel, EvapWaterBodyM, act_nonIrrConsumption, channelStorage, lakeResStorage, totalSto, sum_actTransTotal, sum_actBareSoilEvap, sum_interceptEvap, sum_openWaterEvap, addtoevapotrans, act_bigLakeResAbst, sum_gwRecharge, sum_capRiseFromGW, act_totalIrrConsumption, sum_runoff, returnFlow, act_SurfaceWaterAbstract, dis_outlet, act_irrNonpaddyWithdrawal,abstractedLakeReservoirM3, w1[3], w2[3], w3[3], w1[1], w2[1], w3[1], irr_crop[0], irr_crop[1], irr_crop[2], irr_crop[3], irr_crop[4], irr_crop[5], irr_crop[6], irr_crop[7], irr_crop[8], actTransTotal_crops_Irr[0], actTransTotal_crops_Irr[1], actTransTotal_crops_Irr[2], actTransTotal_crops_Irr[3], actTransTotal_crops_Irr[4], actTransTotal_crops_Irr[5], actTransTotal_crops_Irr[6], actTransTotal_crops_Irr[7], actTransTotal_crops_Irr[8], actTransTotal_crops_nonIrr[0], actTransTotal_crops_nonIrr[1], actTransTotal_crops_nonIrr[2], actTransTotal_crops_nonIrr[3], actTransTotal_crops_nonIrr[4], actTransTotal_crops_nonIrr[5], actTransTotal_crops_nonIrr[6], actTransTotal_crops_nonIrr[7], actTransTotal_crops_nonIrr[8], ET_crop_nonIrr[0], ET_crop_Irr[0], ET_crop_nonIrr[1], ET_crop_Irr[1], ET_crop_nonIrr[2], ET_crop_Irr[2], ET_crop_nonIrr[3], ET_crop_Irr[3], ET_crop_nonIrr[4], ET_crop_Irr[4], ET_crop_nonIrr[5], ET_crop_Irr[5], ET_crop_nonIrr[6], ET_crop_Irr[6], ET_crop_nonIrr[7], ET_crop_Irr[7], ET_crop_nonIrr[8], ET_crop_Irr[8]
 #GlacierMelt, directRunoffGlacier,